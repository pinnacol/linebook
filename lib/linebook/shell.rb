require 'erb'

# Generated by Linecook, do not edit.
module Linebook
  module Shell
    require 'linebook/shell/unix'
    include Unix
    
    def self.extended(base)
      base.attributes 'linebook/shell'
      
      if shell = base.attrs['linebook']['shell']
        base.helpers shell
      end
      
      if os = base.attrs['linebook']['os']
        base.helpers os
      end
      
      super
    end
    
    
    # Backup a file.
    def backup(path, options={})
      backup_path = "#{path}.bak"
      if options[:mv]
        mv_f path, backup_path
      else
        cp_f path, backup_path
      end
      
      chmod 644, backup_path
      nil
    end
    
    def _backup(*args, &block) # :nodoc:
      capture { backup(*args, &block) }
    end
    def directory(target, options={})
      not_if _directory?(target) do 
        mkdir_p target
      end 
      chmod options[:mode], target
      chown options[:user], options[:group], target
      nil
    end
    
    def _directory(*args, &block) # :nodoc:
      capture { directory(*args, &block) }
    end
    def execute(cmd)
      #  <%= cmd %>
      #  
      #  <% check_status %>
      #  
      _erbout.concat(( cmd ).to_s)
      _erbout.concat "\n"
      check_status
      nil
    end
    
    def _execute(*args, &block) # :nodoc:
      capture { execute(*args, &block) }
    end
    
    # Installs a file from the package.
    def file(target, options={})
      source = file_path(options[:source] || File.basename(target))
      install(source, target, options)
      nil
    end
    
    def _file(*args, &block) # :nodoc:
      capture { file(*args, &block) }
    end
    def group?(name)
      #  grep "^<%= name %>:" /etc/group
      _erbout.concat "grep \"^"; _erbout.concat(( name ).to_s); _erbout.concat ":\" /etc/group";
      nil
    end
    
    def _group?(*args, &block) # :nodoc:
      capture { group?(*args, &block) }
    end
    def group(name, options={})
      not_if _group?(name) do
        addgroup name
      end
      nil
    end
    
    def _group(*args, &block) # :nodoc:
      capture { group(*args, &block) }
    end
    
    # Installs a file
    def install(source, target, options={})
      nest_opts(options[:backup], :mv => true) do |opts|
        only_if _file?(target) do
          backup target, opts
        end
      end
      
      nest_opts(options[:directory]) do |opts|
        directory File.dirname(target), opts
      end
      
      cp source, target
      chmod options[:mode], target
      chown options[:user], options[:group], target
      nil
    end
    
    def _install(*args, &block) # :nodoc:
      capture { install(*args, &block) }
    end
    def package(name, version=nil)
      raise NotImplementedError
      nil
    end
    
    def _package(*args, &block) # :nodoc:
      capture { package(*args, &block) }
    end
    def recipe(name)
      #  "<%= env_path %>" - "<%= shell_path %>" "<%= recipe_path(name) %>" $*
      #  <% check_status %>
      _erbout.concat "\""; _erbout.concat(( env_path ).to_s); _erbout.concat "\" - \""; _erbout.concat(( shell_path ).to_s); _erbout.concat "\" \""; _erbout.concat(( recipe_path(name) ).to_s); _erbout.concat "\" $*\n"
      check_status ;
      nil
    end
    
    def _recipe(*args, &block) # :nodoc:
      capture { recipe(*args, &block) }
    end
    
    # Installs a template from the package.
    def template(target, options={})
      template_name = options[:source] || File.basename(target)
      locals = options[:locals] || {}
      
      source = template_path(template_name, locals)
      install(source, target, options)
      nil
    end
    
    def _template(*args, &block) # :nodoc:
      capture { template(*args, &block) }
    end
    def user(name, options={})
      not_if _user?(name) do
        adduser name
      end
      nil
    end
    
    def _user(*args, &block) # :nodoc:
      capture { user(*args, &block) }
    end
  end
end

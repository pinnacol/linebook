require 'erb'

# Generated by Linecook, do not edit.
module Linebook
  module Os
    module Linux
      require 'linebook/os/unix'
      include Unix
      
      # Logs in as the specified user for the duration of a block (the current ENV
      # and pwd are not preserved).
      def login(user='root', &block)
        target_name = guess_target_name(user)
        path = capture_path(target_name, 0700, &block)
        execute 'su', user, path, :l => true
        self
      end
      
      def _login(*args, &block) # :nodoc:
        capture { login(*args, &block) }
      end
      
      # Switches to the specified user for the duration of a block.  The current ENV
      # and pwd are preserved.
      def su(user='root', &block)
        target_name = guess_target_name(user)
        path = capture_path(target_name, 0700) do
          functions.each do |function|
            target.puts function
          end
          instance_eval(&block)
        end
        execute 'su', user, path, :m => true
        self
      end
      
      def _su(*args, &block) # :nodoc:
        capture { su(*args, &block) }
      end
      
      # Adds the user. Assumes the current user has root privileges. Typically more
      # reliable in conjunction with login rather than su; some systems prevent
      # root commands from being available for non-root users.
      def useradd(name, options={}) 
        execute 'useradd', name, options
        self
      end
      
      def _useradd(*args, &block) # :nodoc:
        capture { useradd(*args, &block) }
      end
      
      # Removes the user. Assumes the current user has root privileges. Typically more
      # reliable in conjunction with login rather than su; some systems prevent
      # root commands from being available for non-root users.
      def userdel(name, options={}) 
        # TODO - look into other things that might need to happen before:
        # * kill processes belonging to user
        # * remove at/cron/print jobs etc. 
        execute 'userdel', name, options
        self
      end
      
      def _userdel(*args, &block) # :nodoc:
        capture { userdel(*args, &block) }
      end
    end
  end
end

require 'erb'

# Generated by Linecook, do not edit.
module Linebook
  module Os
    module Linux
      require 'linebook/os/unix'
      include Unix
      
      def login(user='root', &block)
        target_name = guess_target_name(user)
        path = capture_path(target_name) do
          target.puts "export LINECOOK_PACKAGE_DIR=$(cd $(dirname $0)#{'/..' * (target_name.split('/').length - 1)}; pwd)"
          instance_eval(&block)
        end
        #  chmod +x <%= path %>
        #  sudo -i -u <%= user %> "<%= path %>"
        #  
        #  <% check_status %>
        #  
        _erbout.concat "chmod +x "; _erbout.concat(( path ).to_s); _erbout.concat "\n"
        _erbout.concat "sudo -i -u "; _erbout.concat(( user ).to_s); _erbout.concat " \""; _erbout.concat(( path ).to_s); _erbout.concat "\"\n"
        _erbout.concat "\n"
        check_status
        self
      end
      
      def _login(*args, &block) # :nodoc:
        capture { login(*args, &block) }
      end
      
      # Switches to a different user for the duration of a block.
      def su(user='root', &block)
        target_name = guess_target_name(user)
        path = capture_path(target_name, &block)
        #  chmod +x <%= path %>
        #  sudo -E -u <%= user %> <%= path %>
        #  
        #  <% check_status %>
        #  
        _erbout.concat "chmod +x "; _erbout.concat(( path ).to_s); _erbout.concat "\n"
        _erbout.concat "sudo -E -u "; _erbout.concat(( user ).to_s); _erbout.concat " "; _erbout.concat(( path ).to_s); _erbout.concat "\n"
        _erbout.concat "\n"
        check_status
        self
      end
      
      def _su(*args, &block) # :nodoc:
        capture { su(*args, &block) }
      end
      
      def sudo(options={}, path=nil)
        # unless path.nil?
        #   if options[:E]
        # 
        #   else
        #     target << format_cmd('sudo', options)
        #     target << ' -- '
        #     target <<  %q{"export LINECOOK_PACKAGE_DIR='$LINECOOK_PACKAGE_DIR';"}
        #     target.puts %{'. "#{path}"'}
        #   end
        #   check_status
        # end
        self
      end
      
      def _sudo(*args, &block) # :nodoc:
        capture { sudo(*args, &block) }
      end
      
      # Adds the user.  Assumes the current user is root, or has root privileges.
      def useradd(name, options={})
        #  useradd <%= format_options(options) %> <%= name %>
        #  
        _erbout.concat "useradd "; _erbout.concat(( format_options(options) ).to_s); _erbout.concat " "; _erbout.concat(( name ).to_s); _erbout.concat "\n"
        self
      end
      
      def _useradd(*args, &block) # :nodoc:
        capture { useradd(*args, &block) }
      end
    end
  end
end

= Linebook

Cookbooks for Linecook.

== Description

Linebook is the namespace for distributing files uses by Linecook (it would
have been rude to take 'Cookbook' from Chef). Linebook aggregates files from
multiple directories and generates a manifest for lookup using relative paths.

For example:

  /pwd/lib/one.rb
  /gem/a/lib/two.rb
  /gem/b/lib/three.rb

Becomes:

  {
    'one.rb'   => '/pwd/lib/one.rb', 
    'two.rb'   => '/gem/a/lib/two.rb',
    'three.rb' => '/gem/b/lib/three.rb'
  }

== Usage

Linebook generates a manifest from configs that specify the paths and patterns
to glob.

  Linebook('patterns' => 'lib/*/**.rb', 'path' => '/pwd', 'gems' => 'a:b')
  # => {
  #   'one.rb'   => '/pwd/lib/one.rb', 
  #   'two.rb'   => '/gem/a/lib/two.rb',
  #   'three.rb' => '/gem/b/lib/three.rb'
  # }

See below for variations of the config.

== Config

Linebook uses directories, base paths, and patterns to find files and
determine the relative paths used in the manifest. The config literally
defines (in a highly redundant way) what to glob, and how to slice the
results. A basic config looks like this:

  { 'paths' => [['/dir', 'base', 'pattern']] }

And corresponds to this pseudocode:

  for each path in paths
    glob files '/dir/base/pattern'
    for each file in files
      record file using the path relative to '/dir/base'
      (override previous file, if it exists)

Configs can be written in several compact forms that expand into [dir, base,
pattern] arrays. The expansion works in several steps. For illustration
pretend you're on a system where case matters; configs can be written with any
combination of the following:

  # string form
  { 'patterns' => 'base/pattern:BASE/PATTERN',
    'paths'    => '/dir:/DIR' }
  
  # split form
  { 'patterns' => [['base', 'pattern'], ['BASE', 'PATTERN']]
    'paths'    => ['/dir', '/DIR'] }
  
  # path form
  { 'paths'    => [
      ['/dir', 'base', 'pattern'], 
      ['/dir', 'BASE', 'PATTERN'],
      ['/DIR', 'base', 'pattern'],
      ['/DIR', 'BASE', 'PATTERN']]}

When order doesn't matter the patterns can be written as a hash:

  # multiple bases (base order indeterminate)
  { 'patterns' => {'base' => 'pattern', 'BASE' => 'PATTERN'} }
  
  # multiple patterns per-base
  { 'patterns' => {'base' => 'pattern:PATTERN'} }
  { 'patterns' => {'base' => ['pattern', 'PATTERN']} }

When the paths point to gems, the gem names may be specified as 'gems' in the
same way as paths. The path to the latest version will be used. Linebook has
no notion of dependencies; something like Bundler, RVM or personal diligence
needs to ensure the latest version is the correct version to use. Gems are
considered before paths, so these are the same:

  { 'patterns' => 'base/pattern:BASE/PATTERN',
    'gems'     => 'name',
    'paths'    => '/dir' }
  
  { 'paths'    => [
      ['/path/to/name', 'base', 'pattern'], 
      ['/path/to/name', 'BASE', 'PATTERN'], 
      ['/dir', 'base', 'pattern'],
      ['/dir', 'BASE', 'PATTERN']]}

Lastly, you can manually override any result using 'manifest'. The manifest
hash is merged over the files founds along paths.

  { 'manifest'  => {'relative/path' => '/full/path'} }

== Implementation

Linebook uses a series of module functions, which may seem peculiar. Although
Linebook is a standalone library, it is primarily the distribution module for
Linecook. Linecook needs a clean namespace so that users can name helpers as
they please; Linebook was made without any internal constants for that
purpose.

Likewise the helper methods used by Linebook all start with a double
underscore, again to keep the module as clean as possible.

== Installation

Linebook is available as a gem on {Gemcutter}[http://gemcutter.org/gems/linebook]

  % gem install linebook

== Info 

Developer:: {Simon Chiang}[http://bahuvrihi.wordpress.com]
License:: {MIT-Style}[link:files/License_txt.html]